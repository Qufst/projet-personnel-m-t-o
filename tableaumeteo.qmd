---
title: "Prévisions Météo"
format: html
editor: visual
---

## Affichage des Prévisions Météo

```{r,echo=FALSE}

library(httr)
library(jsonlite)
library(htmlTable)

# L'URL de l'API
url <- "https://api.open-meteo.com/v1/forecast?latitude=43.6109&longitude=3.8763&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,wind_speed_10m_max&timezone=auto&forecast_days=5"

# Effectuer la requête GET
response <- GET(url)

# On vérifie si la requête a réussi (code de réponse HTTP 200)
if (http_type(response) == "application/json") {
  # On analyse les données JSON renvoyées par l'API
  data <- fromJSON(content(response,"text"))
  
  # Charger les données des conditions météo depuis le fichier JSO
  weather_conditions <- jsonlite::fromJSON("https://raw.githubusercontent.com/Qufst/projet-personnel-m-t-o/main/dessins_meteo.json")


  # Stocker les données météorologiques
  time <- data$daily$time
  weathercode <- data$daily$weather_code
  temperature_max <- data$daily$temperature_2m_max
  temperature_min <- data$daily$temperature_2m_min
  sunrise <- data$daily$sunrise
  sunset <- data$daily$sunset
  windspeed_max <- data$daily$wind_speed_10m_max
  time[1] <- "aujourd'hui"
  time[2] <- "demain"
} else {
  cat("La requête a échoué avec le code de réponse:", http_status(response)$reason, "\n")
}

```

```{r,echo=FALSE}
# Charger la bibliothèque htmlTable
library(htmlTable)

#
imp <- list()
for (i in 1:length(weathercode)){
  imp[i] = weather_conditions[i]
}
# Créer des vecteurs pour stocker les éléments de imp afin de pouvoir les utiliser dans le dataframe
description_vector <- sapply(imp, function(x) x$description)
image_vector <- paste0("![](", sapply(imp, function(x) x$image), ")")

# Créer un tableau avec les données
weather_table <- data.frame(
  Date = time,
  Description = description_vector,
  Image = paste0("<img src='", sapply(imp, function(x) x$image), "' width='50' height='50' />"),
  TpMax = temperature_max,
  TpMin = temperature_min,
  Sunrise = sunrise,
  Sunset = sunset,
  MaxWindSpeed = windspeed_max
)

# Convertir le tableau en un tableau HTML
weather_table_html <- htmlTable(weather_table, css.cell = "text-align:left; padding: 8px; border: 1px solid #ccc;",class = "custom-table")
```

```{css,echo=FALSE}
<style>
.custom-table {
  background-color: lightgreen
}
</style>

.styled-table {
  border-collapse: collapse;
  width: 100%;
}

.styled-table th, .styled-table td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: left;
}

.styled-table th {
  background-color: #f2f2f2;
  font-weight: bold;
}

.styled-table tr:nth-child(even) {
  background-color: #f2f2f2;
}

.styled-table tr:nth-child(odd) {
  background-color: #fff;
}

.styled-table tr:hover {
  background-color: #e0e0e0;
}
```


```{html,echo=FALSE}
<div class='light-dark-switch'>
    <button class='light-mode'>Light</button>
    <button class='dark-mode active'>Dark</button>
</div>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const switchContainer = document.querySelector('.light-dark-switch');
    const lightModeButton = document.querySelector('.light-mode');
    const darkModeButton = document.querySelector('.dark-mode');
    
    // Toggle light mode
    lightModeButton.addEventListener('click', function() {
        document.body.classList.remove('dark');
        this.classList.add('active');
        darkModeButton.classList.remove('active');
    });
    
    // Toggle dark mode
    darkModeButton.addEventListener('click', function() {
        document.body.classList.add('dark');
        this.classList.add('active');
        lightModeButton.classList.remove('active');
    });
});
</script>

```

```{r,echo=TRUE}

weather_table_html
```